(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{278:function(e,t,a){"use strict";a.r(t);var i=a(0),o=Object(i.a)({},(function(){this._self._c;return this._m(0)}),[function(){var e=this,t=e._self._c;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"experimental-method"}},[e._v("Experimental Method")]),e._v(" "),t("p",[e._v("So, what is this page about?")]),e._v(" "),t("p",[e._v("This is to document a discovery made by greenpepperman14 on Discord")]),e._v(" "),t("p",[e._v("So basically, you can substitute ANY data.win (or a data.win equivalent, like game.droid) into GX.GAMES Exported files, and the game that the new data.win came from would actually load and play")]),e._v(" "),t("p",[e._v("This is only possible because, when compiling with the VM option on any platform, all scripts, objects, and other assets are located within the data.win, or their platform specific equivalent, and when compiling a VM Web Build, the other files are basically just a game.unx loader, which can be changed to load other files (like data.win files) by renaming them to game.unx")]),e._v(" "),t("p",[e._v("So the HTML file is basically just a Front-End for the Game Canvas, but also calls the JS file")]),e._v(" "),t("p",[e._v("The JS files are tied to the old game.unx, but can still load the new file just fine, but it just wont call specific files that the new file expects")]),e._v(" "),t("p",[e._v("The WASM file is less known, but I guess that is a sort of wrapper, that converts the instructions from the game.unx to something that the Browser can understand")]),e._v(" "),t("p",[e._v("The .data file that is sometimes present in these web ports are specifically compiled for the original game.unx, so it won't work for the new one")]),e._v(" "),t("h3",{attrs:{id:"also"}},[e._v("ALSO")]),e._v(" "),t("p",[e._v("This requires both the Web Build files and the replacement data.win file to be compiled by VM, NOT YYC")]),e._v(" "),t("p",[e._v("This is because YYC compiles scripts and objects into the executable, instead of the data.win, so it will absolutely not run")]),e._v(" "),t("h2",{attrs:{id:"so-what-does-this-mean"}},[e._v("So what does this mean?")]),e._v(" "),t("p",[e._v("This method means that you can port really any GMS2 project to the browser without any Source Code, and without ever touching GameMaker.")]),e._v(" "),t("p",[e._v("But the nature of how this works means there will be many problems, such as:")]),e._v(" "),t("ol",[t("li",[e._v("You can't fix any problems with the port, as you would need source code to do that")]),e._v(" "),t("li",[e._v("The new game.unx file might rely on extensions, networking, or external files, which this method cannot provide, which depending on the game, it may mean this method won't work at all")])]),e._v(" "),t("h2",{attrs:{id:"data-win-platform-specific-equivalents"}},[e._v("Data.WIN Platform Specific Equivalents")]),e._v(" "),t("p",[e._v("There are many data.win equivalents that are platform specific, so here are a list of them:")]),e._v(" "),t("ul",[t("li",[e._v("data.win..............Windows Compiled")]),e._v(" "),t("li",[e._v("game.unx..............Linux Compiled / Web Assembly")]),e._v(" "),t("li",[e._v("game.droid............Android Compiled")]),e._v(" "),t("li",[e._v("game.ios..............Mac OS Compiled")])]),e._v(" "),t("p",[e._v("also, I did not discover this, have not really used this method much, and am not an expert on this matter")]),e._v(" "),t("p",[e._v("I am just making educated guesses on how this method works")]),e._v(" "),t("p",[e._v("so the shit I said about what the WASM and JS files do could or could not be complete horseshit")]),e._v(" "),t("p",[e._v("idk")]),e._v(" "),t("p",[e._v("Also, thanks again to greenpepperman for discovering this")]),e._v(" "),t("ul",[t("li",[e._v("he has made some pretty cool Pizza Tower Mod ports with this method, although they do really need fixes, which can't be done unfortunately")])])])}],!1,null,null,null);t.default=o.exports}}]);